01 - Preview.txt
Today we will talk about Case-Based Reasoning. In Case-based reasoning, the cognitive agent addresses new problems by tweaking solutions to similar previously encountered problems. Case-based reasoning builds on the previous lesson on learning recording cases. In learning recording cases, the new problem is identical to the previous problem. In case-based reasoning, the new problem is similar to a previously encountered problem. Case-based reasoning typically has several phases, case retrieval, case adaptation, case evaluation, and case storage. We'll also discuss certain advanced processes of case-based reasoning which will include new methods for case retrieval. 


02 - Exercise Return to Block World.txt
To illustrate the difference between case-based reasoning and learning by recording cases, or instance-based learning, let's revisit our micro-world of blocks. Once again, you can see all of these blocks in this micro-world. So you can see the colors, you can see the shapes, and you could even touch them, so you have some idea about their approximate sizes. Now let us suppose I give you a new block. Note that this new block, the size, is very different from the size of any of the other blocks. What color do you think this block will be? 


03 - Exercise Return to Block World.txt
And that's the point. The point being that often, the new problem is not identical to the old problem. And when it's not identical, then we have to do some reasoning. We can not just retrieve something from memory, and use the same solution that was used earlier. Case-based reasoning, the phrase case-based reasoning, has two parts to it, case-based, and reasoning. So far we have looked at the case-based part, where we can just extract something from memory and reuse it. Now we can look at the reasoning part. Once you have extracted something off memory, how can you reason about it, and adapt it, but for the new problem? 


04 - Recording Cases to Case-Based Reasoning.txt
To examine a more realistic problem, let's revisit the problem that we had in our last lesson. Once again, this is a map of a part of Long Island, and the problem is to go from Q to the end location here. So I'll call it Q problem. We'll retrieve from memory the D case, which takes us from this initial location to this collocation. Clearly, this D case is potentially useful for addressing the Q problem. But it is not useful as is. The initial location of the D case is not the same as the initial location of the Q problem. And the end location of the D case is not the same as the end location of the Q problem. So we can start with this D case but we need to adapt it. So, this leads us to the overall process of case-based reasoning. The basic process of case-based reasoning consists of four steps. The first step is retrieval, and we already and considered this when we were considering learning by recording cases. K nearest neighbor is one way of retrieving cases from memory. Once we have retrieved a case from memory that is delivered to the current problem, we need to adapt it. For example, in the previous problem we had the D case and the Q problem. And we needed to adapt the D case into the Q problem. There are many similar examples. All of us program and all of us, as computer programmers, sometimes use case-based reasoning. We are given a new problem to address, and we often look at the design of a program that we have come across earlier. So there's retrieving a case and they're adapting a particular design of the old program to solve the new problem. Once we have adapted the case to meet the requirements of the new problem, we have a candidate solution for the new problem. With it, the candidate solution is to be evaluated. For example, in the navigation problem, when we have a solution of the Q problem, we can evaluate it but they would actually take us to the end location. We can do a simulation, we can walk through it. As we walk thought it, we will be able to evaluate whether the solution actually succeeds in meeting the requirements of the problem. For the programming problem, once we have a new program that we obtain by adapting the old program, we can actually run the program to see, whether or not it will meet the requirements of the new problem. Let us suppose for a moment that we evaluate a candidate solution and it succeeds. Then, we could encapsulate the new problem and the new solution into a case, and store it back into the case memory, so that case memory is constantly increasing. Notice that this case-based reasoning process unifies memory, reasoning, and learning. There is a case memory that contains a large number of cases and that's how we retrieve cases that are relevant to the current problem. We'll reason when we adapt and evaluate. And we learn when we store the new case back into the case memory. 


05 - Assumptions of Case-Based Reasoning.txt
So like any other to reoccur, again and again. A lot of science is about finding a theory of intelligence, that theory too will give an account of what kind of problems often have similar solutions. Here is a grid of a part of Long Island. Here is a grid of part of Dallas, Texas. Now if you look at the one in the grid in Dallas. Similarly, the second have velcro straps. Now the problem's very similar, a time, it either wouldn't register, or it'd only register one of the touches. Current touchscreens, on smartphones and tablets that we use today, can handle of technology, different material for the screen, and a different way of detecting where two problems that are quite similar will end up having two solutions 


06 - Case Adaptation.txt
Let us look at adaptation the retrieval of the case has already occurred, perhaps using the KNN calculative resources. So then how can they address a small amendment to it. Memory supplies with an answer, the everyday problem of cooking meals. So you may have a recipe for your recipe for that particular dish. You're not going to change example from earlier in this lesson. One thing that almost every the new kind of file I'm reading from. But really I'm just taking the same that's how we get a new design. And the same thing is happening previous solutions. So the next question becomes, how can we adapt an old case to meet and the rule-based method. 


07 - Case Adaptation by Model of the World.txt
Let us look at the first, the model that takes us to a doctor's office, which is quite close to the restaurant that to go from the doctor's office to the restaurant office, instead of having a map of the world, we might have for example an API for the process of doing it in Python. And I have a model of the way Java example, than we not only know something about the configuration of one of the first PhD dissertations that integrated model-based spacing and 


08 - Case Adaptation by Recursive Reasoning.txt
A second method to adapt cases is to my home to the same restaurant. So I don't yet know how to go from going from home to office, another case retrieved for going from office to the case provides a partial solution. So I take the remaining part which was part of a broader problem of persisting data between the second problem of file output. I might draw a case for solving file to build on what you just said, the same kind of thing in a very stealthy manner. This might remind me stealthily underwater under slow speeds. But that now sets up a new goal, how do I achieve stealthy motion the natural wake of water around it. So here I first used the goal that of the squid, which gave me the rest of the solution. And if I compose the two partial the course materials for this lesson. So you can read more about the process 


09 - Case Adaptation by Rules.txt
Let us now consider a third method for you just look around and you find where this heuristic sometimes fails. And that's the point. A heuristic is a rule of thumb going from the home to the restaurant. Having found that solution, going from home to the restaurant. Given a new problem and a case, how do we adapt the case that is shown here. Note that this heuristic resource intensive process. So let's say I'm designing of just reading one byte at a time. The previous case that I'm adapting to generalize on your answer to design. Designers often use heuristics 


10 - Case Evaluation.txt
So let us return to our overall concerned with how to assess the suitability of the candidate a candidate solution. In order to find out whether the restaurant to the home, and we decided we would simply execute it. In other domains, the cost of execution whether or not it worked, we're in fact evaluating whether or not our adaptation use to inform our solution. In design more generally, methods that are possible for evaluation as well. 


11 - Case Storage.txt
So we just talked about how the evolution step in the case based reasoning process when decided a correct solution in fact meets the requirements of the given problem. Now that we have the new problem and the solution for it, we can encapsulate them as a case, and store them in a case memory. We saw the advantages of this kind of storage earlier, when we went from home to restaurant. We stored that case is memory so that when wanted to go back from restaurant to home. We could retrieve that case and try to adapt it. So case choice is an important way of learning. We are constantly accumulating and assimilating new cases. We talk about two kinds of storage mechanisms. Indexing and discrimination crease. 


12 - Case Storage by Index.txt
The rest of the notion of indexing, case with its initial location and the initial location will have a X now very simply by the XY coordinates of the initial location. So in index case X by the XY coordinates initial location and final locations. Nevertheless, this can raise MicroWorld, the indexes may include whether they are scenic or not scenic, different parameters and variables. For example, kind of file they read in. Did they read text? Did they read XML? Did they read some other matches the most of those variables. That's an important point. We want to use an indexical structure, have developed indexical structures that have to do with functions, 


13 - Exercise Case Storage by Index I.txt
But for now, let's go back to where, original navigation micro world. Imagine that we have a nucleus Y. Given our index equals scheme here, of X were coordinates of the initial location, what do you think of the indices of the case Y? 


14 - Exercise Case Storage by Index I.txt
Hey Rick, what's your answer? So we can see pretty easily that 


15 - Exercise Case Storage by Index II.txt
Let's consider a different case. Supposing we have a case Z of going back from the restaurant or the home. Let's also suppose that we're change our index equal Kim. Now we are indexing things by the x square coordinates of the destination not the origin. What will be the indices for the case Z? 


16 - Exercise Case Storage by Index II.txt
That's a good point David. Remember that we're trying to store things, because we want to retrieve things later. And if our storage mechanism is such that it doesn't not allow for efficient retrieval, then it's not a very good storage mechanism. And as you correctly point out, David, as the number of entries increase in this table, and the number of dimensions we are looking at increase also increases. This is going to be coming an inefficient for retrieval. Therefore, let's look at a second method called discrimination trees which provides an alternate way of storing these cases in memory. 


17 - Case Storage by Discrimination Tree.txt
A discrimination tree is the intimidated node pertain to the pertain to the indexical root node which says is the origin not of N? If the answer to that question is yes, discriminate between C and A, in fact we able to disconnect knowledge structure as new cases are put into the case library? Imagine that there is a new case, X. So we can navigate this tree using X. Is the origin of X North of of A? Yes it is. So we come to this branch. Is the origin of X East of of E? No it is not, so we come to this branch. But now we have a problem. Both A and X, have the same discriminating between X and A. This now is a modified new knowledge structure is learned. We learn more about incremental to now design a discrimination tree. At the very top level I would probably a question of what language is the case in, and the branches could be JAVA, down to individual cases that represent different things I might want to node, what is the color of the block? And have a large number of branches 


18 - Exercise Storage by Discrimin Tree I.txt
Let us do an exercise. Supposing we're given the case Y, as shown here. And we're given the discrimination tree, shown on the left. Where would you store the case Y in this discrimination tree? 


19 - Exercise Storage by Discrimin Tree I.txt
What did you come up with, David? So I started at the root, 


20 - Exercise Storage by Discrimin Tree II.txt
But know that A and Y were in this same branch. So we now we need to find a way of discriminating between A and Y. How could we do that? 


21 - Exercise Storage by Discrimin Tree II.txt
What did you find, David? So we've got A right here and to organize the case memory previously, we were very concerned that this side process much more efficient. And that's the point of tree, by asking the right questions to the right nodes, we make whereas here it's logarithmic. 


22 - Case Retrieval Revisited.txt
Now that we have considered storage, let's revisit retrieval. We talked about two different ways of organizing the case memory, a tabular way and a discrimination tree. How can we retrieve the case relevant to a given problem? We assume here that the new problem has the same features in its description as the cases stored in the memory. Earlier when we were storing a case in memory, at that time we were navigating this tree to find where in this tree should we store the new case. This time, we'll use the problem to navigate this tree and find out which case is most similar to the problem. 


23 - Exercise Retrieval by Index.txt
Let us suppose that the case library is organized in the form of a table as shown here. Let us also suppose that we're given a new problem, how to go from this initial location to this goal location. Which case should be retrieved? 


24 - Exercise Retrieval by Index.txt
So what was your answer, David? So comparing the X coordinate of the X and the Y coordinate exactly. That's right, David. 


25 - Exercise Retrieval by Discrimin Tree.txt
Let's repeat this exercise, but this time using discrimination tree for organizing the case memory. So here is a discrimination tree, containing the cases currently in the case memory. And here is the, new problem. You could go to the initial location, to the goal location. Given this problem, what case would be retrieved from this discrimination tree? 


26 - Exercise Retrieval by Discrimin Tree.txt
David what was your answer? So this time we're looking at case to the new problem. 


27 - Advanced Case-Based Reasoning.txt
So far we have talked about the very particular case in a different way. As an example of the evaluation we might want to abandon that case and try to find a different the case and try to do a new one. There is yet another possibility. Let us suppose that we retrieve are many ways in which this process need not necessarily be linear. So Ashok, we should try retrieving again. But what about evaluation showing given a new problem, and you retrieve from your example from our file input problem. One thing I've encountered a lot when file input slightly differently. So in my mind, I must have cases of we can try to repair the failure by going back from the evaluation failures in the case memory. When we store them in the case memory, every successful case. If we stored every successful case, then cases that in fact help us cover a larger span of problems. This means that, even when a case 


28 - Assignment Case-Based Reasoning.txt
In this assignment, discuss how you'd use case-based reasoning to develop an agent that can answer Raven's Progressive Matrices. Make sure to describe how this is different from learning by recording cases alone. Where is your adaptation phase? How are you adapting past solutions to the new problem? What is evaluation in this context? How are you evaluating the strength of your answer? Are you going to record the cases that your agent encounters as they're solving the test, or are you going to equip them with past cases beforehand for them to use to solve new problems? 


29 - Wrap Up.txt
So today we talked about the broad process of case-based reasoning. Learning by recording cases gave us a method for case retrieval called nearest neighbor method. So we went ahead and jumped into the adaptation phase. Given an old solution to a problem, how do we adapt that old solution to a new problem? We talked about three ways of doing that. We can do it by model of the world, we can do it by rules, or we can do it by recursion. Then once we've adapted that old case, how do we then evaluate how good it was for our problem? Then after we evaluated how good it is we looked at storing it back in our memory. We want to build up a case library of past solutions, so if we've solved a new problem we will now sort that back into our case library. Then based on that we revisited the notion of case retrieval. Based on how our case library is organized, how do we retrieve a prior case that's most similar to our new problem? Now there are a lot of open issues here. For example, should we store failed cases? Should we store failed adaptations? Do we want to store them so we can avoid failing in the future? Should we ever forget cases? Can our case library ever get so big that it's intractable, and we can't really use it efficiently? Should we abstract over cases, so should we use these individual cases to develop a more abstract understanding of a concept, or should we stick the individual cases and adapt them from there? If you're interested in these questions you can over to our forums and we'll talk about it there. But we'll also be revisiting these questions throughout the rest of the course. Next time we'll talk about incremental concept learning, which takes individual cases and abstracts over them to learn some kind of higher level concepts. 


30 - The Cognitive Connection.txt
Caseless reasoning has a very strong connection with human cognition as well. Analogical reasoning in general is considered to be a core process of cognition. But analogical reasoning depends upon a spectrum of similarity. At oned end of this spectrum are problems which are identical to previously encountered problems. In that case, we simply have to retrieve the previous solution and apply it. At the other end of the spectrum, are problems with just semantically very dissimilar from previously encountered problems. We'll discuss those problems later in the class. In the middle of the spectrum are problems. Which are similar, but not identical, to previously encountered parts. So now, we need to retrieve the past solutions, tweak them, and apply them. It is this middle of the spectrum, which is most common in human cognition. Again, going back over cognitive architecture, which had components. Reasoning, learning, and memory. Learning by recording cases shifted the balance from reasoning to learning and memory. Case we can contrast unifies the three of them. It says learning is important because we need to acquire and store experiences. Memory is important because we need to be able to retrieve those experiences when needed. And reasoning is important because we need to be able to tweak those experiences to encounter the needs of new problems. 


31 - Final Quiz.txt
Please write down what you learned in this lesson. 


32 - Final Quiz.txt
And thank you for doing it. 


